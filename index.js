const { Telegraf } = require('telegraf');
const cron = require('node-cron');
const mongoose = require('mongoose');
const express = require('express');
const dotenv = require('dotenv');
const cors = require('cors');
const axios = require('axios')
const { menus } = require('./menus.js');
const { registerPayHandlers } = require('./handlers/pay.js');
const { registerPartnerHandlers } = require('./handlers/partner.js');
const { registerDonateHandlers } = require('./handlers/donate.js');
const { registerAboutHandlers } = require('./handlers/about.js');
const { registerCommonHandlers } = require('./handlers/common.js');
const User = require('./models/User.js');
const EventHistory = require('./models/EventHistory.js');
const { RestClientV5 } = require('bybit-api');
const Admin = require('./models/Admin.js');
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");

dotenv.config();

const client = new RestClientV5({
  key: process.env.API,
  secret: process.env.SECRET,
  testnet: false,
});

mongoose
  .connect("mongodb://localhost:27017/telegram")
  .then(() => {
    console.log("Mongodb OK");
  })
  .catch((err) => {
    console.log("Mongodb Error", err);
  });

const bot = new Telegraf(process.env.BOT_TOKEN);
const CHANNEL_ID = process.env.CHANNEL_ID;
const BOT_USERNAME = process.env.BOT_USERNAME;
const SECRET_KEY = process.env.SECRET_KEY

const userStates = new Map();

function determinePeriod(amount, currency) {
  const tariffs = {
      USD: {
          '1 month': 69,
          '3 months': 200,
          '12 months': 708
      },
      RUB: {
          '1 month': 5839.08,
          '3 months': 16924.86,
          '12 months': 59914
      }
  };

  const tariff = tariffs[currency];
  if (!tariff) return null; // –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞

  let closestPeriod = null;
  let closestPrice = -Infinity;

  for (const [period, price] of Object.entries(tariff)) {
      if (amount >= price && price > closestPrice) { // –°—É–º–º–∞ >= —Ç–∞—Ä–∏—Ñ–∞ –∏ —Ç–∞—Ä–∏—Ñ –±–ª–∏–∂–µ –∫ —Å—É–º–º–µ
          closestPeriod = period;
          closestPrice = price;
      }
  }

  return closestPeriod; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ null
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
function calculateEndDate(startDate, period) {
  const endDate = new Date(startDate);

  if (period === '1 month') {
      endDate.setMonth(endDate.getMonth() + 1);
  } else if (period === '3 months') {
      endDate.setMonth(endDate.getMonth() + 3);
  } else if (period === '12 months') {
      endDate.setFullYear(endDate.getFullYear() + 1);
  }

  return endDate;
}

const generateReferralLink = (chatId) => {
  return `https://t.me/${BOT_USERNAME}?start=ref_${chatId}`;
};

bot.start(async (ctx) => {
  await handleStart(ctx);
});

bot.action('start', async (ctx) => {
  await handleStart(ctx);
});

// bot.use((ctx, next) => {
//   const allowedChatId = '1308683371';
//   const currentChatId = ctx.chat?.id.toString();

//   if (currentChatId === allowedChatId) {
//     return next();
//   } else {
//     console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${currentChatId} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è ${allowedChatId}`);
//     ctx.reply("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–¥—É—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω")
//     return;
//   }
// });

let stopUpdating = false;

cron.schedule('5 9 * * *', async () => {
  console.log('‚è±Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

  const users = await User.find({ channelAccess: true });

  console.log("users = ", users);
  

  for (const user of users) {
    const latestEvent = await EventHistory.findOne({ 
      $or: [
        { eventType: "bybit", "rawData.txID": user.bybitUID },
        { eventType: "payment.success", "rawData.buyer.email": user.email }
      ]
    }).sort({ timestamp: -1 });

    if ("latestEvent = ", latestEvent)

    if (!latestEvent) continue;

    const amount = latestEvent.rawData.amount
    let currency = "USD"
    if (latestEvent.eventType === 'payment.success') {
      currency = latestEvent.rawData.currency
    }
    let planMonths = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–µ—Å—è—Ü
    if (currency === "USD" && amount > 100 && amount < 500) {
      planMonths = 3; // 3 –º–µ—Å—è—Ü–∞
    } else if (currency === "USD" && amount > 500) {
      planMonths = 12; // 12 –º–µ—Å—è—Ü–µ–≤
    } else if (currency === "RUB" && amount > 12000 && amount < 40000) {
      planMonths = 3; // 3 –º–µ—Å—è—Ü–∞
    } else if (currency === "RUB" && amount > 40000) {
      planMonths = 12; // 12 –º–µ—Å—è—Ü–µ–≤
    }

    // –†–∞—Å—á—ë—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å –∑–∞–ø–∞—Å–æ–º –Ω–∞ 1 –¥–µ–Ω—å
    const expiryDate = new Date(latestEvent.timestamp);
    expiryDate.setMonth(expiryDate.getMonth() + planMonths); // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü—ã
    expiryDate.setDate(expiryDate.getDate() + 1);

    console.log(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id ${user.chatId} –∏ –ø–æ—á—Ç–æ–π ${user?.email} –∏–ª–∏ txid ${user?.bybitUID} —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è ${expiryDate}`);

    if (new Date() > expiryDate) {
      console.log(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id ${user.chatId} –∏ –ø–æ—á—Ç–æ–π ${user?.email} –∏–ª–∏ txid ${user?.bybitUID} —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è ${expiryDate}`);
      
      user.channelAccess = false;
      await user.save();
      try {

        const lastPaymentDate = new Date(latestEvent.timestamp).toLocaleDateString('ru-RU');
        let message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId ${user.chatId} —É–¥–∞–ª—ë–Ω –∏–∑-–∑–∞ –Ω–µ–æ–ø–ª–∞—Ç—ã.\n`;
        if (user.email) message += `Email: ${user.email}\n`;
        if (user.bybitUID) message += `Bybit UID: ${user.bybitUID}\n`;
        message += `–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç—ã: ${lastPaymentDate}`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å chatId 1308683371
        await bot.telegram.sendMessage('1308683371', message);

        // 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await bot.telegram.sendMessage(user.chatId, '‚õîÔ∏è –°—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫. –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å–Ω–æ–≤–∞.');

        // 2. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
        let isSubscribed = await checkSubscriptionStatus(user.chatId, CHANNEL_ID);
        if (isSubscribed) {
          console.log("isSubscribed true");
          
          await bot.telegram.banChatMember(CHANNEL_ID, user.chatId);
        }

        console.log(`üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.chatId} –æ—Ç–∫–ª—é—á—ë–Ω –∏ —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞.`);
      } catch (err) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${user.chatId} –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:`, err.message);
      }
    }
  }

  console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
});


async function getUsernameByChatId(chatId) {
  if (stopUpdating) return;
  try {
    const chat = await bot.telegram.getChat(chatId);
    const userName = chat.username; // @username –∏–ª–∏ undefined, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
    const firstName = chat.first_name; // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`Username: ${userName || '–Ω–µ –∑–∞–¥–∞–Ω'}, First Name: ${firstName}`);
    const user = await User.findOne({chatId})

    user.userName = userName
    user.firstName = firstName
    await user.save()

    return userName || firstName; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º username –∏–ª–∏ –∏–º—è, –µ—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ:', error);
    return null;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–æ–≤–∞ "start"
bot.hears(/^start$/i, async (ctx) => {
  await handleStart(ctx);
});

bot.hears('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', async (ctx) => {
  await handleStart(ctx);
});

bot.hears('stopUpdating', async (ctx) => {
  stopUpdating = true;
  await ctx.reply('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.');
});

bot.hears('getUsernameByChatId', async (ctx) => {
  try {
    await ctx.reply('–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    const users = await User.find();

    await Promise.all(users.map(user => getUsernameByChatId(user.chatId)));

    await ctx.reply('–ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
  }
});

bot.hears(/^[a-fA-F0-9]{64}$/, async (ctx) => {
  await ctx.reply("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ txID. –ú—ã –µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º...");
  const txId = ctx.message.text;
  const chatId = ctx.chat.id;
  const user = await User.findOne({chatId})

  // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const {isValid, transaction} = await checkTransaction(txId, chatId);
  // const isValid = "success"
  // const transaction = {
  //     coin: 'USDT',
  //     chain: 'TRX',
  //     amount: '2.6',
  //     txID: 'bfa31bc3246adb35246ed315e623e7aa58e1246b1b9d23e34a9ed01d8a57a5dc',
  //     status: 3,
  //     toAddress: 'TA1Y3FXRGokUVT4bb8DurV5kpTB9rScmj1',
  //     tag: '',
  //     depositFee: '',
  //     successAt: '1742384399000',
  //     confirmations: '51',
  //     txIndex: '0',
  //     blockHash: '000000000434ebd298fdfa92f55f0070d85d804ab869504018a3ad4003336444',
  //     batchReleaseLimit: '-1',
  //     depositType: '0',
  //     fromAddress: 'TU4vEruvZwLLkSfV9bNw12EJTPvNr7Pvaa'
  // }
  console.log("isValid = ", isValid);
  console.log("transaction = ", transaction);
  
  if (isValid === "success") {
    await EventHistory.create({
      eventType: "bybit",
      timestamp: new Date(Date.now()), // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp, –µ—Å–ª–∏ –µ—Å—Ç—å
      rawData: transaction // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å req.body
    });
    const isBanned = await isUserBanned(CHANNEL_ID, chatId)

    if (isBanned) {
      await unbanUser(CHANNEL_ID, chatId)
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user.channelAccess = true;
    user.payData.date = new Date(Date.now()); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç Date

    await user.save();
    await ctx.reply("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: https://t.me/+OKyL_x3DpoY5YmNi")
  } else if (isValid === "scammer") {
    await ctx.reply("‚ö†Ô∏è –¢–∞–∫–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.");
  } else if (isValid === "not found") {
    await ctx.reply("‚ö†Ô∏è –í–∞—à–∏ USDT –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –∫–æ—à–µ–ª—ë–∫\n\n*–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –∏–¥–µ—Ç –æ—Ç 1 –¥–æ 5 –º–∏–Ω, –æ–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –•–≠–® –∑–∞–Ω–æ–≤–æ.");
  } else if (isValid === "not enough") {
    await ctx.reply("‚ö†Ô∏è –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.");
  } else {
    await ctx.reply("‚ö†Ô∏è –í–∞—à–∏ USDT –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –∫–æ—à–µ–ª—ë–∫\n\n*–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –∏–¥–µ—Ç –æ—Ç 1 –¥–æ 5 –º–∏–Ω, –æ–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –•–≠–® –∑–∞–Ω–æ–≤–æ.");
  }
});

async function checkSubscriptionStatus(userId, channelId) {
  try {
      const member = await bot.telegram.getChatMember(channelId, userId);
      return ['member', 'administrator', 'creator'].includes(member.status);
  } catch (error) {
      return false; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
  }
}


// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function checkTransaction(txId, chatId) {
  try {
    const candidate = await User.findOne({bybitUID: txId})
    if (candidate) {
      return {isValid: "scammer", transaction: null}
    }
    const response = await client.getDepositRecords({
      coin: 'USDT'
    });

    console.log("response in chatTransaction = ", response);
    

    if (response.retMsg === "success") {
      const transactions = response.result.rows
      console.log("transactions in chatTransaction = ", transactions);
      const transaction = transactions.find((item) => item.txID === txId)
      if (!transaction) {
        return {isValid: "not found", transaction: null}
      }
      const user = await User.findOne({chatId})

      if (transaction.amount < user.bybitUIDPrice) {
        return {isValid: "not enough", transaction: null}
      }

      user.bybitUID = txId
      await user.save()
      return {isValid: "success", transaction}
    } else {
      return {isValid: "error in bybit", transaction: null}
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ TXID: ${error.message}`);
    return false
  }
}

async function handleStart(ctx) {
  const chatId = ctx.chat.id.toString();

  try {
      let user = await User.findOne({ chatId });

      if (!user) {
          user = new User({
              chatId,
              currentMenu: 'start',
              history: [],
          });
          await user.save();
      } else {
          user.currentMenu = 'start';
          user.history = [];
          await user.save();
      }

      let responseText = menus.start.text;

      if (user.channelAccess) {
          const event = await EventHistory.findOne({
              $or: [
                  { 'rawData.buyer.email': user.email },
                  { 'rawData.txID': user.bybitUID }
              ]
          }).sort({ timestamp: -1 });

          console.log("event = ", event);

          if (event) {
              const paymentDate = event.timestamp;
              const amount = parseFloat(event.rawData.amount);
              const currency = event.rawData.currency || 'USD';

              const period = determinePeriod(amount, currency);

              console.log("period = ", period);

              if (period) {
                  const endDate = calculateEndDate(paymentDate, period);

                  console.log("endDate = ", endDate);

                  const paymentDateStr = paymentDate.toLocaleDateString('ru-RU');
                  const endDateStr = endDate.toLocaleDateString('ru-RU');

                  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π Markdown-—Å—Å—ã–ª–∫–æ–π
                  responseText = `–¢–≤–æ–π –¥–æ—Å—Ç—É–ø –≤ –ê–∫–∞–¥–µ–º–∏—é "YouTube –î–õ–Ø –í–°–ï–•" https://t.me/+OKyL_x3DpoY5YmNi`;
              } 
          } else {
              responseText = `–¢–≤–æ–π –¥–æ—Å—Ç—É–ø –≤ –ê–∫–∞–¥–µ–º–∏—é "YouTube –î–õ–Ø –í–°–ï–•" https://t.me/+OKyL_x3DpoY5YmNi`;
          }

          await ctx.reply(responseText, {
              reply_markup: {
                  inline_keyboard: [
                      [{ text: '–£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π', callback_data: 'manage_subscription' }],
                  ],
              },
          });
      } else {
          await ctx.sendVideo(
              "BAACAgIAAxkDAAIBoGfQg7RyamGcAjjFU2xzsLaXygclAAKYcgACnHKISkGiUwABzfmF_TYE",
              { caption: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üé¨ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ ‚¨áÔ∏è" }
          );
          await ctx.reply(responseText, menus.start);
      }

  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ /start:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
}

bot.action('manage_subscription', async (ctx) => {
  const chatId = ctx.chat.id;
  try {
      let user = await User.findOne({ chatId });
      if (!user) {
          user = new User({ chatId });
          await user.save();
      }

      user.history.push(user.currentMenu);
      user.currentMenu = 'manage_subscription';
      await user.save();

      let responseText = "";
      let isSubscribed = await checkSubscriptionStatus(chatId, CHANNEL_ID);

      const event = await EventHistory.findOne({
          $or: [
              { 'rawData.buyer.email': user.email },
              { 'rawData.txID': user.bybitUID }
          ]
      }).sort({ timestamp: -1 });

      console.log("event = ", event);

      if (event) {
          const paymentDate = event.timestamp;
          const amount = parseFloat(event.rawData.amount);
          const currency = event.rawData.currency || 'USD';

          const period = determinePeriod(amount, currency);

          console.log("period = ", period);

          if (period) {
              const endDate = calculateEndDate(paymentDate, period);
              const currentDate = new Date();
              const hasActiveAccess = endDate > currentDate;

              console.log("endDate = ", endDate);

              const endDateStr = endDate.toLocaleDateString('ru-RU');

              // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π Markdown-—Å—Å—ã–ª–∫–æ–π
              responseText = `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: ${endDateStr}`;

              const inlineKeyboard = [];
                
              inlineKeyboard.push([{ text: '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'unsubscribe' }]);
              inlineKeyboard.push([{ text: '–Ø —Ö–æ—á—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ', callback_data: 'subscribe_back' }]);
              
              // inlineKeyboard.push([{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }]);

              await ctx.reply(responseText, {
                  reply_markup: { inline_keyboard: inlineKeyboard }
              });
              return
          }
      } else {
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω.");
      }
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ USDT:', error); // –ò—Å–ø—Ä–∞–≤–∏–ª twelveMonths –Ω–∞ USDT
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø–∏—Å–∫–∏
bot.action('unsubscribe', async (ctx) => {
  const chatId = ctx.chat.id;
  try {
      const user = await User.findOne({ chatId });
      if (!user || !user.channelAccess) {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.');
          return;
      }

      user.history.push(user.currentMenu);
      user.currentMenu = 'unsubscribe';
      await user.save();

      const event = await EventHistory.findOne({
        $and: [
            { 'rawData.buyer.email': user.email },
            { eventType: "payment.success" }
        ]
      }).sort({ timestamp: -1 });

      console.log(event);
      

      if (event) {
        const response = await axios.post(
          "https://gate.lava.top/api/v1/subscriptions",
          {
              contractId: event.rawData.contractId,
              email: event.rawData.buyer.email
          },
          {
              headers: {
                  "Content-Type": "application/json",
                  "X-Api-Key": process.env.X_API_KEY,
              },
          }
        );
        const statusCode = response.status; // –ù–∞–ø—Ä–∏–º–µ—Ä, 200, 201, 204 –∏ —Ç.–¥.
        console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${statusCode}`);
        console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', response.data);

        // –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        if (statusCode === 400 || statusCode === 401) {
            const dynamicMenu = {
              reply_markup: {
                  inline_keyboard: [
                      [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                  ],
                },
            };
      
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 15 –º–∏–Ω", dynamicMenu);
            return
        } 
      }

    const event2 = await EventHistory.findOne({
      $or: [
        { 'rawData.buyer.email': user.email },
        { 'rawData.txID': user.bybitUID }
      ]
    }).sort({ timestamp: -1 });
  
    let endDateStr = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    if (event2) {
      const paymentDate = event2.timestamp;
      const amount = parseFloat(event2.rawData.amount);
      const currency = event2.rawData.currency || 'USD';

      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
      const period = determinePeriod(amount, currency); // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
      if (period) {
        const endDate = calculateEndDate(paymentDate, period);
        endDateStr = endDate.toLocaleDateString('ru-RU'); // –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, "27.03.2025"
      }
    }

    // await bot.telegram.banChatMember(CHANNEL_ID, chatId);
    
    const message = `–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å. –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ ${endDateStr}.\n\n` +
                    `–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –Ω–∞–∂–∞–≤ /start`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply(message);
      
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª
bot.action('subscribe_back', async (ctx) => {
  const chatId = ctx.chat.id;
  try {
      // const user = await User.findOne({ chatId });
      // if (!user || !user.channelAccess) {
      //     await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª.');
      //     return;
      // }

      // user.history.push(user.currentMenu);
      // user.currentMenu = 'subscribe_back';
      // await user.save();

      // // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
      // const event = await EventHistory.findOne({
      //     $or: [
      //         { 'rawData.buyer.email': user.email },
      //         { 'rawData.txID': user.bybitUID }
      //     ]
      // }).sort({ timestamp: -1 });

      // if (event) {
      //     const paymentDate = event.timestamp;
      //     const amount = parseFloat(event.rawData.amount);
      //     const currency = event.rawData.currency || 'USD';
      //     const period = determinePeriod(amount, currency);
      //     const endDate = calculateEndDate(paymentDate, period);
      //     const currentDate = new Date();

      //     if (endDate > currentDate) {
      //       await bot.telegram.unbanChatMember(CHANNEL_ID, chatId);
      //       await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã —Å–Ω–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª.', {
      //           reply_markup: {
      //               inline_keyboard: [[{ text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª', url: 'https://t.me/+OKyL_x3DpoY5YmNi' }]]
      //           }
      //       });
      //     } else {
      //       user.channelAccess = false;
      //       await user.save();
      //       await ctx.reply('–°—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫. –û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É.', {
      //         reply_markup: {
      //           inline_keyboard: [[{ text: '–û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'start' }]]
      //         }
      //       });
      //     }
      // }
      await ctx.reply('–û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ')
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ –∫–∞–Ω–∞–ª:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏



bot.on("chat_join_request", async (ctx) => {
  try {
      const user = ctx.chatJoinRequest.from;
      const chatId = user.id;
      const groupId = CHANNEL_ID // ID –≥—Ä—É–ø–ø—ã

      console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: ${user.first_name} (@${user.username})`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      let dbUser = await User.findOne({ chatId });

      if (!dbUser) {
          dbUser = new User({ chatId, channelAccess: false });
          await dbUser.save();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ
      try {
          const member = await ctx.telegram.getChatMember(groupId, chatId);

          if (["member", "administrator", "creator"].includes(member.status)) {
              console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ: ${user.first_name} (@${user.username})`);
              return; // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ
          }
      } catch (error) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      }

      if (dbUser.channelAccess) {
          // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî –æ–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
          await ctx.telegram.approveChatJoinRequest(groupId, chatId);
          console.log(`‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω: ${user.first_name} (@${user.username})`);
      } else {
          // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –±–∞–Ω–µ –ª–∏ –æ–Ω
          const isBanned = await isUserBanned(groupId, chatId);

          if (isBanned) {
              await unbanUser(groupId, chatId);
          }

          await ctx.telegram.declineChatJoinRequest(groupId, chatId);
          await ctx.telegram.sendMessage(
              chatId,
              `–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É "YouTube –¥–ª—è –í–°–ï–•" –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.`,
              {
                  reply_markup: {
                      keyboard: [[{ text: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" }]],
                      resize_keyboard: true,
                      one_time_keyboard: true
                  }
              }
          );

          console.log(`‚õî –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω: ${user.first_name} (@${user.username})`);
      }
  } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:", error);
  }
});

async function isUserBanned(chatId, userId) {
  try {
      const member = await bot.telegram.getChatMember(chatId, userId);
      return member.status === 'kicked'; // true, –µ—Å–ª–∏ –≤ –±–∞–Ω–µ
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      return false;
  }
}


async function unbanUser(chatId, userId) {
  try {
      await bot.telegram.unbanChatMember(chatId, userId);
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ä–∞–∑–±–∞–Ω–µ–Ω –≤ –≥—Ä—É–ø–ø–µ ${chatId}`);
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
  }
}

registerPayHandlers(bot, menus);
registerPartnerHandlers(bot, userStates, menus);
registerDonateHandlers(bot, userStates, menus);
registerAboutHandlers(bot, userStates, menus);
registerCommonHandlers(bot, menus);

bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

const app = express();
app.use(express.json());
app.use(cors({
  origin: "*", // –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–º–µ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä, "https://kulzhabay.kz"
  methods: "GET,POST,PUT,DELETE,OPTIONS",
  allowedHeaders: "Content-Type,Authorization,X-Requested-With",
  credentials: true
}));

app.use(bot.webhookCallback('/bot'));

const API_KEY = process.env.API_KEY;

const checkApiKey = (req, res, next) => {
  console.log("req.headers = ", req.headers);
  const providedApiKey = req.headers['x-api-key'];

  if (!providedApiKey || providedApiKey !== API_KEY) {
    return res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π API-–∫–ª—é—á' });
  }
  next();
};

app.post('/lavaTopNormalPay', async (req, res) => {
  try {
    try {
      const {status, buyer, timestamp} = req.body
      console.log("req.body in lavaTopNormalPay = ", req.body);
      await EventHistory.create({
        eventType: req.body.eventType,
        timestamp: new Date(req.body.timestamp || Date.now()), // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp, –µ—Å–ª–∏ –µ—Å—Ç—å
        rawData: req.body // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å req.body
      });
      if (status === "subscription-active") {
        const userEmail = buyer.email
        
        const user = await User.findOne({ email: userEmail });
  
        if (!user) {
          return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        const chatId = user.chatId

        const isBanned = await isUserBanned(CHANNEL_ID, chatId)

        if (isBanned) {
          await unbanUser(CHANNEL_ID, chatId)
        }
  
        // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user.channelAccess = true;
        user.payData.date = new Date(timestamp); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç Date
  
        await user.save();
        await axios.post(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`, {
          chat_id: chatId,
          text: `–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: https://t.me/+OKyL_x3DpoY5YmNi`
        });
  
        return res.json({ message: "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω" });
      }


      res.json({ message: "–°—Ç–∞—Ç—É—Å –Ω–µ 'completed', –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è" });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ lavaTest:', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ lavaTest:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/lavaTopRegularPay', async (req, res) => {
  try {
    const {status, buyer, timestamp} = req.body
    console.log("req.body in lavaTopRegularPay = ", req.body);
    await EventHistory.create({
      eventType: req.body.eventType,
      timestamp: new Date(req.body.timestamp || Date.now()), // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp, –µ—Å–ª–∏ –µ—Å—Ç—å
      rawData: req.body // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å req.body
    });
    
    if (status === "subscription-active") {
      const userEmail = buyer.email
      
      const user = await User.findOne({ email: userEmail });

      if (!user) {
        return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const chatId = user.chatId

      const isBanned = await isUserBanned(CHANNEL_ID, chatId)

      if (isBanned) {
        await unbanUser(CHANNEL_ID, chatId)
      }

      // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      user.channelAccess = true;
      user.payData.date = new Date(timestamp); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç Date

      await user.save();
      await axios.post(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`, {
        chat_id: chatId,
        text: `–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: https://t.me/+OKyL_x3DpoY5YmNi`
      });

      return res.json({ message: "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω" });
    }
    res.json({ message: "–°—Ç–∞—Ç—É—Å –Ω–µ 'completed', –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è" });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ lavaTest:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post("/create-invoice", async (req, res) => {
  try {
      const { email, periodicity, currency } = req.body;

      let paymentMethod = ""

      if (currency === "USD") {
        paymentMethod = "UNLIMINT"
      } else {
        paymentMethod = "BANK131"
      }

      const data = {
        email,
        offerId: process.env.OFFER_ID,
        periodicity,
        currency,
        paymentMethod
      }

      console.log("data in create-invoice = ", data);

      const response = await axios.post("https://gate.lava.top/api/v2/invoice", {...data}, {
          headers: {
              "Content-Type": "application/json",
              "X-Api-Key": process.env.X_API_KEY,
          },
      });

      console.log("response in create-invoice = ", response.data);

      // const invoiceId = response.data.id;
      // startInvoiceStatusCheck(invoiceId);

      res.json(response.data);
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞:", error?.response?.data || error.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞" });
  }
});

app.get("/getProducts", async (req, res) => {
  try {
      const response = await axios.get("https://gate.lava.top/api/v2/products", {
          headers: {
              "Content-Type": "application/json",
              "X-Api-Key": process.env.X_API_KEY,
          },
          params: {
            showAllSubscriptionPeriods: true
          }
      });


      res.json(response.data);
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞:", error?.response?.data || error.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞" });
  }
});

app.post("/unban", async (req, res) => {
  try {
      await unbanUser(CHANNEL_ID, "1308683371")
      await axios.post(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`, {
        chat_id: "1308683371",
        text: `–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: https://t.me/+OKyL_x3DpoY5YmNi`
      });
      res.json({success: "unban!!!!"});
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ unban");
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞" });
  }
});

app.post("/updateUser", async (req, res) => {
  try {
    console.log("we in updateUser req.body = ", req.body);
    
    const {chatId, email} = req.body

    const user = await User.findOne({chatId})

    console.log("user = ", user);

    user.email = email

    await user.save()

    res.json({message: "success"})
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ lavaTest:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
})

app.post("/updateUserInvoiceId", async (req, res) => {
  try {
    console.log("we in updateUserInvoiceId req.body = ", req.body);
    const {chatId, invoiceId} = req.body

    const user = await User.findOne({chatId})

    user.invoiceId = invoiceId

    await user.save()
    res.json({message: "success"})
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ lavaTest:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
})

app.post("/getHistories", async (req, res) => {
  try {
    const { email, hash, page = 1 } = req.body;
    const filter = {};
    const limit = 10

    if (email) filter["rawData.buyer.email"] = email;
    if (hash) filter["rawData.txID"] = hash;

    const totalCount = await EventHistory.countDocuments(filter);
    const histories = await EventHistory.find(filter)
      .sort({ timestamp: -1 })
      .skip((page - 1) * limit)
      .limit(limit);

    res.json({
      histories,
      totalPages: Math.ceil(totalCount / limit),
      currentPage: page,
    });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
});

app.post("/auth", async (req, res) => {
  const { email, password } = req.body;
  const admin = await Admin.findOne({ email });
  if (!admin || !(await bcrypt.compare(password, admin.password))) {
      return res.status(401).json({ success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
  }
  const token = jwt.sign({ email }, SECRET_KEY, { expiresIn: "10y" });
  res.json({ success: true, token });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
app.post("/verifyToken", async (req, res) => {
  const { token } = req.body;
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
      if (err) return res.json({ valid: false });
      res.json({ valid: true, email: decoded.email });
  });
});

async function sendMessageWithDelay(chatId, text, delayMs = 100) {
  return new Promise((resolve) => {
    setTimeout(async () => {
      try {
        await bot.telegram.sendMessage(chatId, text, { parse_mode: 'Markdown' });
        resolve(true);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}:`, error);
        resolve(false);
      }
    }, delayMs);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async function broadcastMessage(status, message) {
  try {
    const filter = {};
    if (status === "subscriptions") filter["channelAccess"] = true;
    if (status === "unsubscriptions") filter["channelAccess"] = false;

    const users = await User.find(filter)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for (const user of users) {
      await sendMessageWithDelay(user.chatId, message);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
  }
}

app.post("/broadcast", async(req, res) => {
  try {
    const { status, message } = req.body;
    await broadcastMessage(status, message)

    res.json({success: true});
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
})

app.post("/getUsers", async(req, res) => {
  try {
    const { status } = req.body;

    const filter = {};
    if (status === "subscriptions") filter["channelAccess"] = true;
    if (status === "unsubscriptions") filter["channelAccess"] = false;

    const users = await User.find(filter)

    res.json({success: true, users});
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
})

app.post("/searchUser", async(req, res) => {
  try {
    const { userName } = req.body;

    const users = await User.find({
      $or: [
        { userName: { $regex: new RegExp(userName, 'i') } }, // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è userName
        { firstName: { $regex: new RegExp(userName, 'i') } } // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è firstName
      ]
    });

    res.json({success: true, users});
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
})

const PORT = process.env.PORT || 3006;
app.listen(PORT, async () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});