import User from '../models/User.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

export const registerPartnerHandlers = (bot, userStates, menus) => {
  bot.action('partnerMenu', async (ctx) => {
    const chatId = ctx.chat.id;
    const state = userStates.get(chatId) || { currentMenu: 'start', history: [] };
    state.history.push(state.currentMenu);
    state.currentMenu = 'partnerMenu';
    userStates.set(chatId, state);
    try {
      await ctx.reply(menus.partnerMenu.text, menus.partnerMenu);
    } catch (error) {
      console.error('Error in partnerMenu:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  });

  bot.action('referralLink', async (ctx) => {
    const chatId = ctx.chat.id.toString();
    const state = userStates.get(chatId) || { currentMenu: 'start', history: [] };
    state.history.push(state.currentMenu);
    state.currentMenu = 'referralLink';
    userStates.set(chatId, state);
    try {
      await ctx.reply(menus.referralLink.text1)
      await ctx.reply(menus.referralLink.text2, menus.referralLink);
    } catch (error) {
      console.error('Error in referralLink:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  });

  bot.action('forFriends', async (ctx) => {
    const chatId = ctx.chat.id;
    const state = userStates.get(chatId) || { currentMenu: 'start', history: [] };
    state.history.push(state.currentMenu);
    state.currentMenu = 'forFriends';
    userStates.set(chatId, state);
    const user = await User.findOne({chatId})
    const text = `–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ üëá
${user.refferal}

*–ø–∞—Ä—Ç–Ω–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞, –∫–ª–∏–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –µ—â–µ –Ω–µ –±—ã–ª –≤ –º–æ–µ–º –±–æ—Ç–µ`
    try {
      await ctx.reply(text, menus.forFriends);
    } catch (error) {
      console.error('Error in forFriends:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  });

  bot.action('makeContent', async (ctx) => {
    const chatId = ctx.chat.id;
    const state = userStates.get(chatId) || { currentMenu: 'start', history: [] };
    state.history.push(state.currentMenu);
    state.currentMenu = 'makeContent';
    userStates.set(chatId, state);
    const user = await User.findOne({chatId})
    const text = `–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ üëá
${user.refferal}

üöÄ –ó–∞—Ö–æ–¥–∏ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—Ä–µ–∑—á–∏–∫–æ–≤ https://t.me/+ZcepyvOE0O4wNjc6, —Ç–∞–º —è –≤—ã–∫–ª–∞–¥—ã–≤–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–∞–∫ –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–æ–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä–∫–æ–π

*–ø–∞—Ä—Ç–Ω–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞, –∫–ª–∏–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –µ—â–µ –Ω–µ –±—ã–ª –≤ –º–æ–µ–º –±–æ—Ç–µ`
    try {
      await ctx.reply(text, menus.makeContent);
    } catch (error) {
      console.error('Error in makeContent:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  });

  bot.action('statistics', async (ctx) => {
    const chatId = ctx.chat.id.toString();
    const state = userStates.get(chatId) || { currentMenu: 'start', history: [] };
    state.history.push(state.currentMenu);
    state.currentMenu = 'statistics';
    userStates.set(chatId, state);
    try {
      const user = await User.findOne({ chatId });
      const text = `–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user.refferalBonus}`;
      await ctx.reply(text, menus.statistics);
    } catch (error) {
      console.error('Error in statistics:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  });

  bot.action('getMoney', async (ctx) => {
    const chatId = ctx.chat.id;
    const state = userStates.get(chatId) || { currentMenu: 'start', history: [] };
    state.history.push(state.currentMenu);
    state.currentMenu = 'getMoney';
    userStates.set(chatId, state);
    try {
      await ctx.reply(menus.getMoney.text, menus.getMoney);
    } catch (error) {
      console.error('Error in getMoney:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  });
};