const { default: axios } = require("axios");
const User = require("../models/User.js");
const { RestClientV5 } = require('bybit-api');
const { randomUUID } = require('crypto');
const dotenv = require('dotenv');

dotenv.config();

const client = new RestClientV5({
  key: process.env.API,
  secret: process.env.SECRET,
  testnet: false,
});

const generatePaymentLink = (chatId, selectedPlan) => {
  return `https://kulzhabay.kz/pay/${chatId}/${selectedPlan}`;
}

const generateTextForUSDT = (price, address) => {
    return `–û—Ç–ø—Ä–∞–≤—å—Ç–µ
${price} USDT –≤ —Å–µ—Ç–∏ TRC-20
–ù–∞ –∞–¥—Ä–µ—Å:
\`${address}\`

*–∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏ –æ–Ω —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ø –æ–ø–ª–∞—Ç–∏–ª üëá

*–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞`
} 

async function isUserBanned(chatId, userId) {
    try {
        const member = await bot.telegram.getChatMember(chatId, userId);
        return member.status === 'kicked'; // true, –µ—Å–ª–∏ –≤ –±–∞–Ω–µ
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        return false;
    }
}


async function unbanUser(chatId, userId) {
    try {
        await bot.telegram.unbanChatMember(chatId, userId);
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ä–∞–∑–±–∞–Ω–µ–Ω –≤ –≥—Ä—É–ø–ø–µ ${chatId}`);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    }
}

const registerPayHandlers = (bot, menus) => {
    bot.action('payAccess', async (ctx) => {
      const chatId = ctx.chat.id;
        try {
            let user = await User.findOne({ chatId });
            if (!user) {
                user = new User({ chatId });
                await user.save();
            }

            user.history.push(user.currentMenu);
            user.currentMenu = 'payAccess';
            await user.save();

            await ctx.reply(menus.payAccess.text, menus.payAccess);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ payAccess:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    });
  
    bot.action('oneMonth', async (ctx) => {
      const chatId = ctx.chat.id;
      try {
          let user = await User.findOne({ chatId });
          if (!user) {
              user = new User({ chatId });
              await user.save();
          }

          user.history.push(user.currentMenu);
          user.currentMenu = 'oneMonth';
          user.selectedPlan = 1;
          await user.save();

          const paymentUrl = generatePaymentLink(chatId, user.selectedPlan);

          const dynamicMenu = {
              text: menus.oneMonth.text,
              reply_markup: {
                  inline_keyboard: [
                      [{ text: 'üí≥ –ö–∞—Ä—Ç–æ–π (–ª—é–±–∞—è –≤–∞–ª—é—Ç–∞)', url: paymentUrl }],
                      [{ text: 'USDT (trc-20)', callback_data: 'USDT' }],
                      [{ text: '–î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã', url: 'https://yt-filatov.com/public-offer' }],
                      [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                  ],
              },
          };

          await ctx.reply(dynamicMenu.text, dynamicMenu);
      } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ oneMonth:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    });
  
    bot.action('threeMonthss', async (ctx) => {
      const chatId = ctx.chat.id;
      try {
          let user = await User.findOne({ chatId });
          if (!user) {
              user = new User({ chatId });
              await user.save();
          }

          user.history.push(user.currentMenu);
          user.currentMenu = 'threeMonthss';
          user.selectedPlan = 3;
          await user.save();

          const paymentUrl = generatePaymentLink(chatId, user.selectedPlan);

          const dynamicMenu = {
              text: menus.threeMonthss.text,
              reply_markup: {
                  inline_keyboard: [
                      [{ text: 'üí≥ –ö–∞—Ä—Ç–æ–π (–ª—é–±–∞—è –≤–∞–ª—é—Ç–∞)', url: paymentUrl }],
                      [{ text: 'USDT (trc-20)', callback_data: 'USDT' }],
                      [{ text: '–î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã', url: 'https://yt-filatov.com/public-offer' }],
                      [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                  ],
              },
          };

          await ctx.reply(dynamicMenu.text, dynamicMenu);
      } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ twelveMonths:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    });
  
    bot.action('twelveMonths', async (ctx) => {
      const chatId = ctx.chat.id;
        try {
            let user = await User.findOne({ chatId });
            if (!user) {
                user = new User({ chatId });
                await user.save();
            }

            user.history.push(user.currentMenu);
            user.currentMenu = 'twelveMonths';
            user.selectedPlan = 12;
            await user.save();

            const paymentUrl = generatePaymentLink(chatId, user.selectedPlan);

            const dynamicMenu = {
                text: menus.twelveMonths.text,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üí≥ –ö–∞—Ä—Ç–æ–π (–ª—é–±–∞—è –≤–∞–ª—é—Ç–∞)', url: paymentUrl }],
                        [{ text: 'USDT (trc-20)', callback_data: 'USDT' }],
                        [{ text: '–î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã', url: 'https://yt-filatov.com/public-offer' }],
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                    ],
                },
            };

            await ctx.reply(dynamicMenu.text, dynamicMenu);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ twelveMonths:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    });
  
    bot.action('USDT', async (ctx) => {
        const chatId = ctx.chat.id;
        try {
            let user = await User.findOne({ chatId });
            if (!user) {
                user = new User({ chatId });
                await user.save();
            }

            user.history.push(user.currentMenu);
            user.currentMenu = 'USDT';

            const {address, uid} = await getSubDepositAddress(chatId)

            user.bybitUID = uid
            const price = await fetchProduct("foreign_bank", user.selectedPlan)
            user.bybitUIDPrice = price

            await user.save();

            const text =  generateTextForUSDT(price, address)
            const dynamicMenu = {
                text,
                parse_mode: "Markdown",
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: 'paid' }],
                        [{ text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url: 'https://telegra.ph/Kak-oplatit-podpisku-kriptoj-12-09' }],
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                    ],
                },
            };

            await ctx.reply(dynamicMenu.text, dynamicMenu);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ twelveMonths:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    });

    bot.action('paid', async (ctx) => {
        const chatId = ctx.chat.id;
        try {
            let user = await User.findOne({ chatId });
            if (!user) {
                user = new User({ chatId });
                await user.save();
            }

            user.history.push(user.currentMenu);
            user.currentMenu = 'paid';
            await user.save();

            const isPaid = checkPay(user.bybitUID, user.bybitUIDPrice)

            if (isPaid) {
                const transferResponse = await transferFunds(user.bybitUID, user.bybitUIDPrice)

                if (transferResponse) {
                    const deleteResponse = await deleteSubAccount(user.bybitUID)
                    if (deleteResponse) {
                        const chatId = user.chatId

                        const isBanned = await isUserBanned("-1002404499058_1", chatId)

                        if (isBanned) {
                            await unbanUser("-1002404499058_1", chatId)
                        }
                
                        // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        user.channelAccess = true;
                        user.payData.date = new Date(timestamp); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç Date
                
                        await user.save();
                        await axios.post(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`, {
                            chat_id: chatId,
                            text: `–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: https://t.me/+OKyL_x3DpoY5YmNi`
                        })
                    } else {
                        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤ pay.js");
                    }
                } else {
                    console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –¥–µ–Ω–µ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç –≤ pay.js");
                }

            } else {
                const dynamicMenu = {
                    text: `–í–∞—à–∏ USDT –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –∫–æ—à–µ–ª—ë–∫

*–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –∏–¥–µ—Ç –æ—Ç 1 –¥–æ 5 –º–∏–Ω, –æ–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞`,
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑', callback_data: 'paid' }],
                            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                        ],
                    },
                };
                await ctx.reply(dynamicMenu.text, dynamicMenu);
            }

            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ twelveMonths:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    });
  };

async function getSubDepositAddress(clientId) {
    try {
      const randomSuffix = Math.floor(100000 + Math.random() * 900000);
      const uniqueUsername = `${clientId}${randomSuffix}`;
      const res = await client.createSubMember({ username: uniqueUsername, memberType: 1 });
      console.log('–û—Ç–≤–µ—Ç –æ—Ç createSubMember:', JSON.stringify(res));
      if (res.retCode === 0) {
        console.log(`–°—É–±–∞–∫–∫–∞—É–Ω—Ç –¥–ª—è ${clientId} —Å–æ–∑–¥–∞–Ω —Å UID: ${res.result.uid}`);
        const uid = res.result.uid
        const response = await client.getSubDepositAddress('USDT', 'TRX', String(uid));
      
        if (response.retCode === 0) {
          const TRXAddress = response.result.chains.addressDeposit;
          console.log('–ê–¥—Ä–µ—Å —Å—É–± –∞–∫–∫–∞—É–Ω—Ç–∞:', TRXAddress);
          if (!TRXAddress) {
            console.error(`–ê–¥—Ä–µ—Å TRX –¥–ª—è ${uid} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return null;
          }
          return {address: TRXAddress, uid};
        } else {
          console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è ${uid}: ${response.retMsg}`);
          return null;
        }
      } else {
        console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–±–∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è ${clientId}: ${res.retMsg}`);
        return null;
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
      return null;
    }
}

const fetchProduct = async (paymentMethod, period) => {
    const productId = "6a336c2b-7992-40d7-8829-67159d4cd3c5";
    try {
        const response = await axios.get("https://api.kulzhabay.kz/getProducts");
        console.log("response in Pay = ", response);
        
        const products = response.data.items

        const product = products
            .flatMap(p => p.offers)
            .find(offer => offer.id === productId);

        if (!product) {
            console.error("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        const periodicityMap = {
            "1": "MONTHLY",
            "3": "PERIOD_90_DAYS",
            "12": "PERIOD_YEAR",
        };

        const selectedPeriod = periodicityMap[period] || "MONTHLY";
        const selectedCurrency = paymentMethod === "bank_rf" ? "RUB" : "USD";

        const selectedPrice = product.prices.find(
            p => p.periodicity === selectedPeriod && p.currency === selectedCurrency
        );

        if (selectedPrice) {
            return selectedPrice.amount
        } else {
            console.error("–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
    }
};

async function checkPay(subUid, fixedAmount) {
    try {
        const response = await client.getSubAccountDepositRecords({ subMemberId: subUid, coin: 'USDT' });
        if (response.retCode === 0) {
            if (response.result.rows.length === 0) {
                return false
            }
            const paid = response.result.rows.some((d) => parseFloat(d.amount) >= fixedAmount);
            return paid;
        } else {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–ª—è ${subUid}: ${response.retMsg}`);
            return false;
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
        return false;
    }
}

async function transferFunds(subUid, fixedAmount) {
    try {
      const response = await client.createUniversalTransfer({
        transferId: randomUUID(),
        coin: 'USDT',
        amount: fixedAmount.toString(),
        fromMemberId: subUid,
        toMemberId: '441931017',
        fromAccountType: 'FUND',    // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ FUND, –≥–¥–µ –µ—Å—Ç—å USDT
        toAccountType: 'UNIFIED',   // –û—Å—Ç–∞–≤–ª—è–µ–º UNIFIED –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
      });
  
      if (response.retCode === 0) {
        console.log("response = ", response);
        console.log(`–°—Ä–µ–¥—Å—Ç–≤–∞ —Å —Å—É–±–∞–∫–∫–∞—É–Ω—Ç–∞ ${subUid} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç`);
        return true;
      } else {
        console.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è ${subUid}: ${response.retMsg}`);
        console.log("response = ", response);
        return false;
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
      return false;
    }
  }

async function deleteSubAccount(subUid) {
try {
    const response = await client.deleteSubMember({ subMemberId: subUid });
    if (response.retCode === 0) {
    console.log(`–°—É–±–∞–∫–∫–∞—É–Ω—Ç ${subUid} —É–¥–∞–ª—ë–Ω`);
    return true;
    } else {
    console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É–±–∞–∫–∫–∞—É–Ω—Ç–∞ ${subUid}: ${response.retMsg}`);
    return false;
    }
} catch (error) {
    console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
    return false;
}
}

module.exports = { registerPayHandlers }