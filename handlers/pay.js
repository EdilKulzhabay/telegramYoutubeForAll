const User = require("../models/User.js");
const axios = require('axios')

const generatePaymentLink = (chatId, selectedPlan) => {
  return `https://kulzhabay.kz/pay/${chatId}/${selectedPlan}`;
}

const generateUSDTText = async (selectedPlan) => {
    const price = await fetchProduct("foreign_bank", selectedPlan)

    const text = `–û—Ç–ø—Ä–∞–≤—å—Ç–µ
${price} USDT –≤ —Å–µ—Ç–∏ TRC-20
–ù–∞ –∞–¥—Ä–µ—Å:
\`TXbSHP4Dbp4S8URBK8yEGTvGNLS9EbSrkv\`

*–∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏ –æ–Ω —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ø –æ–ø–ª–∞—Ç–∏–ª üëá

*–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –•–≠–® —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (TXID)`

    return {text, price: 3}
}

const fetchProduct = async (paymentMethod, period) => {
    const productId = "6a336c2b-7992-40d7-8829-67159d4cd3c5";
    try {
        const response = await axios.get("https://api.kulzhabay.kz/getProducts");
        
        const products = response.data.items

        const product = products
            .flatMap(p => p.offers)
            .find(offer => offer.id === productId);

        if (!product) {
            console.error("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        const periodicityMap = {
            "1": "MONTHLY",
            "3": "PERIOD_90_DAYS",
            "12": "PERIOD_YEAR",
        };

        const selectedPeriod = periodicityMap[period] || "MONTHLY";
        const selectedCurrency = paymentMethod === "bank_rf" ? "RUB" : "USD";

        const selectedPrice = product.prices.find(
            p => p.periodicity === selectedPeriod && p.currency === selectedCurrency
        );

        if (selectedPrice) {
            return selectedPrice.amount
        } else {
            console.error("–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
    }
};


const registerPayHandlers = (bot, menus) => {
    bot.action('payAccess', async (ctx) => {
      const chatId = ctx.chat.id;
        try {
            let user = await User.findOne({ chatId });
            if (!user) {
                user = new User({ chatId });
                await user.save();
            }

            user.history.push(user.currentMenu);
            user.currentMenu = 'payAccess';
            await user.save();

            await ctx.reply(menus.payAccess.text, menus.payAccess);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ payAccess:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    });
  
    bot.action('oneMonth', async (ctx) => {
      const chatId = ctx.chat.id;
      try {
          let user = await User.findOne({ chatId });
          if (!user) {
              user = new User({ chatId });
              await user.save();
          }

          user.history.push(user.currentMenu);
          user.currentMenu = 'oneMonth';
          user.selectedPlan = 1;
          await user.save();

          const paymentUrl = generatePaymentLink(chatId, user.selectedPlan);

          const dynamicMenu = {
              text: menus.oneMonth.text,
              reply_markup: {
                  inline_keyboard: [
                      [{ text: 'üí≥ –ö–∞—Ä—Ç–æ–π (–ª—é–±–∞—è –≤–∞–ª—é—Ç–∞)', url: paymentUrl }],
                      [{ text: 'USDT (trc-20)', callback_data: 'USDT' }],
                      [{ text: '–î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã', url: 'https://yt-filatov.com/public-offer' }],
                      [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                  ],
              },
          };

          await ctx.reply(dynamicMenu.text, dynamicMenu);
      } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ oneMonth:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    });
  
    bot.action('threeMonthss', async (ctx) => {
      const chatId = ctx.chat.id;
      try {
          let user = await User.findOne({ chatId });
          if (!user) {
              user = new User({ chatId });
              await user.save();
          }

          user.history.push(user.currentMenu);
          user.currentMenu = 'threeMonthss';
          user.selectedPlan = 3;
          await user.save();

          const paymentUrl = generatePaymentLink(chatId, user.selectedPlan);

          const dynamicMenu = {
              text: menus.threeMonthss.text,
              reply_markup: {
                  inline_keyboard: [
                      [{ text: 'üí≥ –ö–∞—Ä—Ç–æ–π (–ª—é–±–∞—è –≤–∞–ª—é—Ç–∞)', url: paymentUrl }],
                      [{ text: 'USDT (trc-20)', callback_data: 'USDT' }],
                      [{ text: '–î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã', url: 'https://yt-filatov.com/public-offer' }],
                      [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                  ],
              },
          };

          await ctx.reply(dynamicMenu.text, dynamicMenu);
      } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ twelveMonths:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    });
  
    bot.action('twelveMonths', async (ctx) => {
        const chatId = ctx.chat.id;
        try {
            let user = await User.findOne({ chatId });
            if (!user) {
                user = new User({ chatId });
                await user.save();
            }

            user.history.push(user.currentMenu);
            user.currentMenu = 'twelveMonths';
            user.selectedPlan = 12;
            await user.save();

            const paymentUrl = generatePaymentLink(chatId, user.selectedPlan);

            const dynamicMenu = {
                text: menus.twelveMonths.text,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üí≥ –ö–∞—Ä—Ç–æ–π (–ª—é–±–∞—è –≤–∞–ª—é—Ç–∞)', url: paymentUrl }],
                        [{ text: 'USDT (trc-20)', callback_data: 'USDT' }],
                        [{ text: '–î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã', url: 'https://yt-filatov.com/public-offer' }],
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                    ],
                },
            };

            await ctx.reply(dynamicMenu.text, dynamicMenu);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ twelveMonths:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    });
  
    bot.action('USDT', async (ctx) => {
        const chatId = ctx.chat.id;
        try {
            let user = await User.findOne({ chatId });
            if (!user) {
                user = new User({ chatId });
                await user.save();
            }

            const {text, price} = await generateUSDTText(user.selectedPlan);
            
            user.history.push(user.currentMenu);
            user.currentMenu = 'USDT';
            user.bybitUIDPrice = price
            await user.save();


            const dynamicMenu = {
                text: text,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: 'paid' }],
                        [{ text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url: 'https://telegra.ph/Kak-oplatit-podpisku-kriptoj-12-09' }],
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                    ],
                },
            };

            await ctx.reply(dynamicMenu.text, dynamicMenu);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ twelveMonths:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    });

    bot.action('paid', async (ctx) => {
        const chatId = ctx.chat.id;
        try {
            let user = await User.findOne({ chatId });
            if (!user) {
                user = new User({ chatId });
                await user.save();
            }

            user.history.push(user.currentMenu);
            user.currentMenu = 'paid';
            await user.save();


            const dynamicMenu = {
                text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –•–≠–® —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (TXID)",
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                    ],
                },
            };

            await ctx.reply(dynamicMenu.text, dynamicMenu);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ twelveMonths:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    });
  };

module.exports = { registerPayHandlers }