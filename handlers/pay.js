const User = require("../models/User.js");
// const {getSubDepositAddress2} = require("../bybit.js")
const { RestClientV5 } = require('bybit-api');
const { randomUUID } = require('crypto');
const dotenv = require('dotenv');

dotenv.config();

const client = new RestClientV5({
  key: process.env.API,
  secret: process.env.SECRET,
  testnet: false,
});

const generatePaymentLink = (chatId, selectedPlan) => {
  return `https://kulzhabay.kz/pay/${chatId}/${selectedPlan}`;
}

const registerPayHandlers = (bot, menus) => {
    bot.action('payAccess', async (ctx) => {
      const chatId = ctx.chat.id;
        try {
            let user = await User.findOne({ chatId });
            if (!user) {
                user = new User({ chatId });
                await user.save();
            }

            user.history.push(user.currentMenu);
            user.currentMenu = 'payAccess';
            await user.save();

            await ctx.reply(menus.payAccess.text, menus.payAccess);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ payAccess:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    });
  
    bot.action('oneMonth', async (ctx) => {
      const chatId = ctx.chat.id;
      try {
          let user = await User.findOne({ chatId });
          if (!user) {
              user = new User({ chatId });
              await user.save();
          }

          user.history.push(user.currentMenu);
          user.currentMenu = 'oneMonth';
          user.selectedPlan = 1;
          await user.save();

          const paymentUrl = generatePaymentLink(chatId, user.selectedPlan);

          const dynamicMenu = {
              text: menus.oneMonth.text,
              reply_markup: {
                  inline_keyboard: [
                      [{ text: 'üí≥ –ö–∞—Ä—Ç–æ–π (–ª—é–±–∞—è –≤–∞–ª—é—Ç–∞)', url: paymentUrl }],
                      [{ text: 'USDT (trc-20)', callback_data: 'USDT' }],
                      [{ text: '–î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã', url: 'https://yt-filatov.com/public-offer' }],
                      [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                  ],
              },
          };

          await ctx.reply(dynamicMenu.text, dynamicMenu);
      } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ oneMonth:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    });
  
    bot.action('threeMonthss', async (ctx) => {
      const chatId = ctx.chat.id;
      try {
          let user = await User.findOne({ chatId });
          if (!user) {
              user = new User({ chatId });
              await user.save();
          }

          user.history.push(user.currentMenu);
          user.currentMenu = 'threeMonthss';
          user.selectedPlan = 3;
          await user.save();

          const paymentUrl = generatePaymentLink(chatId, user.selectedPlan);

          const dynamicMenu = {
              text: menus.threeMonthss.text,
              reply_markup: {
                  inline_keyboard: [
                      [{ text: 'üí≥ –ö–∞—Ä—Ç–æ–π (–ª—é–±–∞—è –≤–∞–ª—é—Ç–∞)', url: paymentUrl }],
                      [{ text: 'USDT (trc-20)', callback_data: 'USDT' }],
                      [{ text: '–î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã', url: 'https://yt-filatov.com/public-offer' }],
                      [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                  ],
              },
          };

          await ctx.reply(dynamicMenu.text, dynamicMenu);
      } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ twelveMonths:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    });
  
    bot.action('twelveMonths', async (ctx) => {
      const chatId = ctx.chat.id;
        try {
            let user = await User.findOne({ chatId });
            if (!user) {
                user = new User({ chatId });
                await user.save();
            }

            user.history.push(user.currentMenu);
            user.currentMenu = 'twelveMonths';
            user.selectedPlan = 12;
            await user.save();

            const paymentUrl = generatePaymentLink(chatId, user.selectedPlan);

            const dynamicMenu = {
                text: menus.twelveMonths.text,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üí≥ –ö–∞—Ä—Ç–æ–π (–ª—é–±–∞—è –≤–∞–ª—é—Ç–∞)', url: paymentUrl }],
                        [{ text: 'USDT (trc-20)', callback_data: 'USDT' }],
                        [{ text: '–î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã', url: 'https://yt-filatov.com/public-offer' }],
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                    ],
                },
            };

            await ctx.reply(dynamicMenu.text, dynamicMenu);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ twelveMonths:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    });
  
    bot.action('USDT', async (ctx) => {
        const chatId = ctx.chat.id;
        try {
            let user = await User.findOne({ chatId });
            if (!user) {
                user = new User({ chatId });
                await user.save();
            }

            user.history.push(user.currentMenu);
            user.currentMenu = 'USDT';

            const uid = await getSubDepositAddress2(chatId)

            user.bybitUID = uid
            
            await user.save();

            const text = `–û—Ç–ø—Ä–∞–≤—å—Ç–µ
80 USDT –≤ —Å–µ—Ç–∏ TRC-20
–ù–∞ –∞–¥—Ä–µ—Å:
${uid}

*–∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏ –æ–Ω —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ø –æ–ø–ª–∞—Ç–∏–ª üëá

*–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
`

            const dynamicMenu = {
                text,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: 'paid' }],
                        [{ text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url: 'https://telegra.ph/Kak-oplatit-podpisku-kriptoj-12-09' }],
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                    ],
                },
            };

            await ctx.reply(dynamicMenu.text, dynamicMenu);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ twelveMonths:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    });

    bot.action('paid', async (ctx) => {
        const chatId = ctx.chat.id;
        try {
            let user = await User.findOne({ chatId });
            if (!user) {
                user = new User({ chatId });
                await user.save();
            }

            user.history.push(user.currentMenu);
            user.currentMenu = 'paid';
            await user.save();

            const dynamicMenu = {
                text: menus.threeMonthss.text,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: 'paid' }],
                        [{ text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url: 'https://telegra.ph/Kak-oplatit-podpisku-kriptoj-12-09' }],
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
                    ],
                },
            };

            await ctx.reply(dynamicMenu.text, dynamicMenu);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ twelveMonths:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    });
  };

async function getSubDepositAddress2(clientId) {
    try {
      const randomSuffix = Math.floor(100000 + Math.random() * 900000);
      const uniqueUsername = `${clientId}${randomSuffix}`;
      const res = await client.createSubMember({ username: uniqueUsername, memberType: 1 });
      console.log('–û—Ç–≤–µ—Ç –æ—Ç createSubMember:', JSON.stringify(res));
      if (res.retCode === 0) {
        console.log(`–°—É–±–∞–∫–∫–∞—É–Ω—Ç –¥–ª—è ${clientId} —Å–æ–∑–¥–∞–Ω —Å UID: ${res.result.uid}`);
        const uid = res.result.uid
        const response = await client.getSubDepositAddress('USDT', 'TRX', String(uid));
      
        if (response.retCode === 0) {
          const TRXAddress = response.result.chains.addressDeposit;
          console.log('–ê–¥—Ä–µ—Å —Å—É–± –∞–∫–∫–∞—É–Ω—Ç–∞:', TRXAddress);
          if (!TRXAddress) {
            console.error(`–ê–¥—Ä–µ—Å TRX –¥–ª—è ${uid} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return null;
          }
          return TRXAddress;
        } else {
          console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è ${uid}: ${response.retMsg}`);
          return null;
        }
      } else {
        console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–±–∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è ${clientId}: ${res.retMsg}`);
        return null;
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
      return null;
    }
}

module.exports = { registerPayHandlers }